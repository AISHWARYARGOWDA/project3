import React, { useState } from "react";
import axios from "axios";
import PrimaryButton from "../../common/components/PrimaryButton";

const BASE_URL = "http://localhost:8080/api/payroll"; // Spring Boot backend URL

export default function PayrollPayment() {
  const [instruction, setInstruction] = useState({
    paymentCurrency: "",
    debitAccount: "",
    date: "",
  });

  const [payments, setPayments] = useState([
    {
      payeeDetails: "",
      payeeName: "",
      accountNumber: "",
      reference: `REF-${Date.now()}`,
      amount: "",
    },
  ]);

  const handleInstructionChange = (e) => {
    const { name, value } = e.target;
    setInstruction((prev) => ({ ...prev, [name]: value }));
  };

  const handlePaymentChange = (index, e) => {
    const { name, value } = e.target;
    setPayments((prev) => {
      const updated = [...prev];
      if (name === "amount") {
        updated[index][name] = value.replace(/[^0-9]/g, "");
      } else {
        updated[index][name] = value;
      }
      return updated;
    });
  };

  const addPaymentRow = () => {
    setPayments((prev) => [
      ...prev,
      {
        payeeDetails: "",
        payeeName: "",
        accountNumber: "",
        reference: `REF-${Date.now()}`,
        amount: "",
      },
    ]);
  };

  const removePaymentRow = (index) => {
    setPayments((prev) => prev.filter((_, i) => i !== index));
  };

  const saveBatch = async (status) => {
    const batch = {
      id: Date.now(),
      instruction,
      payments,
      status,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    try {
      await axios.post(`${BASE_URL}/batch`, batch);
      alert(`Batch ${status} successfully!`);
      window.location.href = "/manage-payroll"; // redirect after save
    } catch (error) {
      console.error(error);
      alert("Failed to save batch. Check console for details.");
    }
  };

  const totalAmount = payments.reduce(
    (sum, p) => sum + (Number(p.amount) || 0),
    0
  );

  const formatAmount = (amount) => {
    if (!instruction.paymentCurrency) return amount.toLocaleString();
    if (instruction.paymentCurrency === "INR") return `${Number(amount).toLocaleString("en-IN")} INR`;
    if (instruction.paymentCurrency === "USD") return `${Number(amount).toLocaleString("en-US")} USD`;
    return amount.toLocaleString();
  };

  const formatAmountInput = (amount) => {
    if (!amount) return "";
    if (instruction.paymentCurrency === "INR") return Number(amount).toLocaleString("en-IN");
    if (instruction.paymentCurrency === "USD") return Number(amount).toLocaleString("en-US");
    return Number(amount).toLocaleString();
  };

  return (
    <div className="container p-2">
      <div className="card p-3">
        <h2 className="text-center mb-3">Create Payroll Payments</h2>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            saveBatch("Submitted");
          }}
        >
          {/* Instruction Details */}
          <h4>Instruction Details</h4>
          <div className="row mb-3">
            <div className="col">
              <label>Debit Account *</label>
              <select
                name="debitAccount"
                value={instruction.debitAccount}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Debit Account</option>
                <option value="Corporate INR">Corporate INR</option>
                <option value="Corporate USD">Corporate USD</option>
              </select>
            </div>

            <div className="col">
              <label>Currency *</label>
              <select
                name="paymentCurrency"
                value={instruction.paymentCurrency}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Currency</option>
                <option value="INR">INR</option>
                <option value="USD">USD</option>
              </select>
            </div>

            <div className="col">
              <label>Date *</label>
              <input
                type="date"
                name="date"
                value={instruction.date}
                onChange={handleInstructionChange}
                className="form-control"
                required
              />
            </div>
          </div>

          {/* Payment Details */}
          <h4 className="d-flex justify-content-between">
            <span>Payment Details</span>
          </h4>

          <div style={{ maxHeight: "300px", overflowY: "auto", border: "1px solid #ccc", borderRadius: "5px" }}>
            <table className="table table-bordered text-center mb-0">
              <thead className="table-light" style={{ position: "sticky", top: 0, zIndex: 1 }}>
                <tr>
                  <th>S. No.</th>
                  <th>Reference</th>
                  <th>Payee Role</th>
                  <th>Payee Name</th>
                  <th>Account Number</th>
                  <th>Amount</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {payments.map((p, i) => (
                  <tr key={i}>
                    <td>{i + 1}</td>
                    <td><input className="form-control form-control-sm" name="reference" value={p.reference} readOnly /></td>
                    <td><input className="form-control form-control-sm" name="payeeDetails" value={p.payeeDetails} onChange={(e) => handlePaymentChange(i, e)} required /></td>
                    <td><input className="form-control form-control-sm" name="payeeName" value={p.payeeName} onChange={(e) => handlePaymentChange(i, e)} required /></td>
                    <td><input className="form-control form-control-sm" name="accountNumber" value={p.accountNumber} onChange={(e) => handlePaymentChange(i, e)} required /></td>
                    <td><input className="form-control form-control-sm text-end" type="text" name="amount" value={formatAmountInput(p.amount)} onChange={(e) => handlePaymentChange(i, e)} required /></td>
                    <td><button type="button" className="btn btn-sm btn-danger" onClick={() => removePaymentRow(i)}>Remove</button></td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Total Amount Sticky Bar */}
          <div style={{ position: "sticky", bottom: 0, background: "#0055a4", color: "white", borderTop: "1px solid #444", padding: "8px 12px", fontSize: "0.95rem", textAlign: "right", zIndex: 10 }}>
            <strong>Total Amount: {formatAmount(totalAmount)}</strong>
          </div>

          {/* Buttons */}
          <div className="d-flex justify-content-between align-items-center my-2">
            <button type="button" className="btn btn-outline-secondary my-2" onClick={addPaymentRow}>+ Add Payment Row</button>
            <div className="d-flex gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={() => saveBatch("Draft")}>Save as Draft</button>
              <PrimaryButton type="submit">Submit</PrimaryButton>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

package com.example.payroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Instruction {
    private String paymentCurrency;
    private String debitAccount;
    private String date;

    public String getPaymentCurrency() { return paymentCurrency; }
    public void setPaymentCurrency(String paymentCurrency) { this.paymentCurrency = paymentCurrency; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }
}
package com.example.payroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Payment {
    private String payeeDetails;
    private String payeeName;
    private String accountNumber;
    private String reference;
    private String amount;

    public String getPayeeDetails() { return payeeDetails; }
    public void setPayeeDetails(String payeeDetails) { this.payeeDetails = payeeDetails; }

    public String getPayeeName() { return payeeName; }
    public void setPayeeName(String payeeName) { this.payeeName = payeeName; }

    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }

    public String getReference() { return reference; }
    public void setReference(String reference) { this.reference = reference; }

    public String getAmount() { return amount; }
    public void setAmount(String amount) { this.amount = amount; }
}
package com.example.payroll.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "payroll_batches")
public class PayrollBatch {

    @Id
    private Long id;

    @Embedded
    private Instruction instruction;

    @ElementCollection
    @CollectionTable(name = "payments", joinColumns = @JoinColumn(name = "batch_id"))
    private List<Payment> payments;

    private String status;
    private String createdAt;
    private String updatedAt;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Instruction getInstruction() { return instruction; }
    public void setInstruction(Instruction instruction) { this.instruction = instruction; }

    public List<Payment> getPayments() { return payments; }
    public void setPayments(List<Payment> payments) { this.payments = payments; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }

    public String getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(String updatedAt) { this.updatedAt = updatedAt; }
}
package com.example.payroll.repository;

import com.example.payroll.model.PayrollBatch;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PayrollBatchRepository extends JpaRepository<PayrollBatch, Long> {
}
package com.example.payroll.service;

import com.example.payroll.model.PayrollBatch;
import com.example.payroll.repository.PayrollBatchRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PayrollService {

    private final PayrollBatchRepository repository;

    public PayrollService(PayrollBatchRepository repository) {
        this.repository = repository;
    }

    public PayrollBatch saveBatch(PayrollBatch batch) {
        return repository.save(batch);
    }

    public List<PayrollBatch> getAllBatches() {
        return repository.findAll();
    }

    public PayrollBatch getBatchById(Long id) {
        return repository.findById(id).orElse(null);
    }
}
package com.example.payroll.controller;

import com.example.payroll.model.PayrollBatch;
import com.example.payroll.service.PayrollService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/payroll")
@CrossOrigin(origins = "http://localhost:3000") // React frontend
public class PayrollController {

    private final PayrollService service;

    public PayrollController(PayrollService service) {
        this.service = service;
    }

    @PostMapping("/batch")
    public PayrollBatch saveOrSubmitBatch(@RequestBody PayrollBatch batch) {
        return service.saveBatch(batch);
    }

    @GetMapping("/batch")
    public List<PayrollBatch> getAllBatches() {
        return service.getAllBatches();
    }

    @GetMapping("/batch/{id}")
    public PayrollBatch getBatchById(@PathVariable Long id) {
        return service.getBatchById(id);
    }
}

