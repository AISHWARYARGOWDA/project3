const handleSubmit = async (payload, type) => {
  try {
    let url = "http://localhost:8080/api/payroll";

    if (type === "save") {
      url += "/save";
    } else if (type === "draft") {
      url += "/draft";
    }

    const response = await axios.post(url, payload);
    console.log("✅ Saved:", response.data);

    // navigate after success
    navigate("/managepayroll");
  } catch (err) {
    if (err.response) {
      console.error("❌ Backend error:", err.response.data);
    } else if (err.request) {
      console.error("❌ No response from backend:", err.request);
    } else {
      console.error("❌ Request error:", err.message);
    }
    alert("Error saving payroll batch");
  }
};
try {
    const response = await axios.post("http://localhost:8080/api/payroll", batchData);
    console.log("Saved:", response.data);
    window.location.href = "/manage-payroll"; // navigate on success
  } catch (err) {
    console.error("Error saving batch:", err);
    alert("Error saving payroll batch");
  }
};
const saveBatch = async (status) => {
  const payload = {
    paymentCurrency: instruction.paymentCurrency,
    debitAccount: instruction.debitAccount,
    date: instruction.date,
    payments,
  };

  const url =
    status === "SAVED"
      ? "http://localhost:8080/api/payroll/save"
      : "http://localhost:8080/api/payroll/draft";

  try {
    await axios.post(url, payload);
    navigate("/manage-payroll");
  } catch (error) {
    console.error(
      "SaveBatch failed:",
      error.response ? error.response.data : error.message
    );
  }
};
package com.example.payroll.controller;

import com.example.payroll.model.PayrollInstruction;
import com.example.payroll.service.PayrollService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/payroll")
@CrossOrigin(origins = "http://localhost:3000") // allow React to call API
public class PayrollController {

    private final PayrollService service;

    public PayrollController(PayrollService service) {
        this.service = service;
    }

    // Save payroll instruction
    @PostMapping
    public PayrollInstruction createPayroll(@RequestBody PayrollInstruction instruction) {
        return service.saveInstruction(instruction);
    }

    // Get all instructions
    @GetMapping
    public…
@RestController
@RequestMapping("/api/payroll")
@CrossOrigin(origins = "http://localhost:3000") 
public class PayrollController {

    private final PayrollService service;

    public PayrollController(PayrollService service) {
        this.service = service;
    }

    // Save & Submit
    @PostMapping("/save")
    public PayrollInstruction savePayroll(@RequestBody PayrollInstruction instruction) {
        instruction.setStatus("SAVED"); // important
        return service.saveInstruction(instruction);
    }

    // Save as Draft
    @PostMapping("/draft")
    public PayrollInstruction draftPayroll(@RequestBody PayrollInstruction instruction) {
        instruction.setStatus("DRAFT"); // important
        return service.saveInstruction(instruction);
    }

    // Get all
    @GetMapping
    public List<PayrollInstruction> getAllPayrolls() {
        return service.getAllInstructions();
    }

    // Get by Id
    @GetMapping("/{id}")
    public PayrollInstruction getPayrollById(@PathVariable Long id) {
        return service.getInstructionById(id);
    }

    // Get all drafts
    @GetMapping("/drafts")
    public List<PayrollInstruction> getDrafts() {
        return service.getInstructionsByStatus("DRAFT");
    }

    // Get all saved
    @GetMapping("/saved")
    public List<PayrollInstruction> getSaved() {
        return service.getInstructionsByStatus("SAVED");
    }
}
}



